{"ast":null,"code":"var _jsxFileName = \"/Users/danielshi/Documents/GitHub/donut-nft/src/Components/CountdownTimer/CountdownTimer.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport './timer.scss';\nimport { getRemainingTimeUntilMsTimestamp } from './Utils/CountdownTimerUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultRemainingTime = {\n  seconds: '00',\n  minutes: '00',\n  hours: '00',\n  days: '00'\n};\n\nconst CountdownTimer = _ref => {\n  _s();\n\n  let {\n    countdownTimestampMs\n  } = _ref;\n  const [remainingTime, setRemainingTime] = useState(defaultRemainingTime);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      updateRemainingTime(countdownTimestampMs);\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [countdownTimestampMs]);\n\n  function updateRemainingTime(countdown) {\n    setRemainingTime(getRemainingTimeUntilMsTimestamp(countdown));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"countdown-timer\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: remainingTime.days\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"days\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"two-numbers\",\n      children: remainingTime.hours\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"hours\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"two-numbers\",\n      children: remainingTime.minutes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"minutes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"two-numbers\",\n      children: remainingTime.seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"seconds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CountdownTimer, \"2iit0KZAxs3RAU3zsA1alDlabB0=\");\n\n_c = CountdownTimer;\nexport default CountdownTimer;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownTimer\");","map":{"version":3,"sources":["/Users/danielshi/Documents/GitHub/donut-nft/src/Components/CountdownTimer/CountdownTimer.js"],"names":["useState","useEffect","getRemainingTimeUntilMsTimestamp","defaultRemainingTime","seconds","minutes","hours","days","CountdownTimer","countdownTimestampMs","remainingTime","setRemainingTime","intervalId","setInterval","updateRemainingTime","clearInterval","countdown"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAO,cAAP;AACA,SAAQC,gCAAR,QAA+C,6BAA/C;;AAEA,MAAMC,oBAAoB,GAAG;AACzBC,EAAAA,OAAO,EAAE,IADgB;AAEzBC,EAAAA,OAAO,EAAE,IAFgB;AAGzBC,EAAAA,KAAK,EAAE,IAHkB;AAIzBC,EAAAA,IAAI,EAAE;AAJmB,CAA7B;;AAOA,MAAMC,cAAc,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAACC,IAAAA;AAAD,GAA2B;AAC/C,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAACG,oBAAD,CAAlD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,UAAU,GAAGC,WAAW,CAAC,MAAM;AACjCC,MAAAA,mBAAmB,CAACL,oBAAD,CAAnB;AACH,KAF6B,EAE3B,IAF2B,CAA9B;AAGA,WAAO,MAAMM,aAAa,CAACH,UAAD,CAA1B;AACH,GALQ,EAKP,CAACH,oBAAD,CALO,CAAT;;AAOA,WAASK,mBAAT,CAA6BE,SAA7B,EAAwC;AACpCL,IAAAA,gBAAgB,CAACT,gCAAgC,CAACc,SAAD,CAAjC,CAAhB;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,4BACI;AAAA,gBAAON,aAAa,CAACH;AAArB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA,gBAA+BG,aAAa,CAACJ;AAA7C;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA,gBAA+BI,aAAa,CAACL;AAA7C;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAM,MAAA,SAAS,EAAC,aAAhB;AAAA,gBAA+BK,aAAa,CAACN;AAA7C;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA1BD;;GAAMI,c;;KAAAA,c;AA4BN,eAAeA,cAAf","sourcesContent":["import {useState, useEffect} from 'react';\nimport './timer.scss';\nimport {getRemainingTimeUntilMsTimestamp} from './Utils/CountdownTimerUtils';\n\nconst defaultRemainingTime = {\n    seconds: '00',\n    minutes: '00',\n    hours: '00',\n    days: '00'\n}\n\nconst CountdownTimer = ({countdownTimestampMs}) => {\n    const [remainingTime, setRemainingTime] = useState(defaultRemainingTime);\n\n    useEffect(() => {\n        const intervalId = setInterval(() => {\n            updateRemainingTime(countdownTimestampMs);\n        }, 1000);\n        return () => clearInterval(intervalId);\n    },[countdownTimestampMs]);\n\n    function updateRemainingTime(countdown) {\n        setRemainingTime(getRemainingTimeUntilMsTimestamp(countdown));\n    }\n\n    return(\n        <div className=\"countdown-timer\">\n            <span>{remainingTime.days}</span>\n            <span>days</span>\n            <span className=\"two-numbers\">{remainingTime.hours}</span>\n            <span>hours</span>\n            <span className=\"two-numbers\">{remainingTime.minutes}</span>\n            <span>minutes</span>\n            <span className=\"two-numbers\">{remainingTime.seconds}</span>\n            <span>seconds</span>\n        </div>\n    );\n}\n\nexport default CountdownTimer;"]},"metadata":{},"sourceType":"module"}